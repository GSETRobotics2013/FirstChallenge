void HTEnhancedIRSeekerV2(const byte  port, int &dir, int &strength)
{
  int cResp;
  byte cmdBuf[] = {0x10, 0x43};  // Read DC signal strengths (skip the dir)
  byte respBuf[];                 // Response Buffer
  bool fSuccess;
  int i, iMax;
  long dcSigSum, dcStr;

  dir = 0;
  strength = 0;

  // Read DC mode
  cResp=6;
  fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
  if (fSuccess) {
    // Find the max DC sig strength
    iMax = 0;
    for (i=1; i<5; i++) {
        if (respBuf[i] > respBuf[iMax])
            iMax = i;
    }

    // Calc base DC direction value
    dir = iMax*2+1;

    // Set base dcStrength based on max signal and average
    dcSigSum = respBuf[iMax] + respBuf[5];

    // Check signal strength of neighboring sensor elements
    if ((iMax > 0) && (respBuf[iMax-1] > respBuf[iMax]/2)) {
        dir--;
        dcSigSum += respBuf[iMax-1];
    }
    if ((iMax < 4) && (respBuf[iMax+1] > respBuf[iMax]/2)) {
        dir++;
        dcSigSum += respBuf[iMax+1];
    }

    // Make DC strength compatible with AC strength. use: sqrt(dcSigSum*500)
    dcSigSum *= 500; dcStr = 1;
    repeat(10) dcStr = (dcSigSum/dcStr + dcStr) / 2;  // sqrt approx
    strength = dcStr;

    // Decide if using DC strength or should read and use AC strength
    if (strength <= 200) {
      // Use AC Dir
      dir = 0; strength = 0;
      cmdBuf[1] = 0x49; // Recycle rest of cmdBuf from the DC read operation
      cResp=6;
      fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
      if (fSuccess) {
        dir = respBuf[0];
        // Sum the sensor elements to get strength
        if (dir > 0) for (i=1; i<=5; i++) strength += respBuf[i];
      }
    }
  }
}

task main()
{
  int dir;
  int strength;
  bool alreadySynced = false;
  int rotationDeg,
      leftRotate,
      rightRotate;

  SetSensorLowspeed(S1);
//  SetHTIRSeeker2Mode(S1, HTIR2_MODE_1200);

  while(true) {
      HTEnhancedIRSeekerV2(S1, dir, strength);
      dir = SensorHTIRSeeker2ACDir(S1);

      if (dir > 1) {
         if(!alreadySynced) {
             while(dir == 5) {
                 OnRev(OUT_A, 25);
             }
             leftRotate = MotorRotationCount(OUT_A);
             while(dir == 5) {
                 OnFwd(OUT_A, -25);
             }
             rightRotate = MotorRotationCount(OUT_A);
             rotationDeg = (rightRotate + leftRotate) / 2;
             RotateMotorEx(OUT_A, 25, rotationDeg);
             alreadySynced = true;
         }
         OnFwdSync(OUT_AB, 50, (5-dir) * -25);
      }
      else {
         OnFwdSync(OUT_AB, 25, 100);
      }

      TextOut(0, LCD_LINE3, "Edir:  ");
      NumOut(6*5, LCD_LINE3, dir);
      TextOut(6*7, LCD_LINE3, "Estr:     ");
      NumOut(6*12, LCD_LINE3, strength);
      Wait(15);
  }
}
