#define PORT_RMOTOR OUT_A
#define PORT_LMOTOR OUT_B
#define PORT_MOTORS OUT_AB
#define PORT_LIGHT  IN_4
#define PORT_COLOR  IN_2
#define PORT_US     IN_3
#define PORT_IR     IN_1

#define COLOR_BLUE  3
#define COLOR_RED   7

void HTEnhancedIRSeekerV2(const byte  port, int &dir, int &strength)
{
  int cResp;
  byte cmdBuf[] = {0x10, 0x43};  // Read DC signal strengths (skip the dir)
  byte respBuf[];                 // Response Buffer
  bool fSuccess;
  int i, iMax;
  long dcSigSum, dcStr;

  dir = 0;
  strength = 0;

  // Read DC mode
  cResp=6;
  fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
  if (fSuccess) {
    // Find the max DC sig strength
    iMax = 0;
    for (i=1; i<5; i++) {
        if (respBuf[i] > respBuf[iMax])
            iMax = i;
    }

    // Calc base DC direction value
    dir = iMax*2+1;

    // Set base dcStrength based on max signal and average
    dcSigSum = respBuf[iMax] + respBuf[5];

    // Check signal strength of neighboring sensor elements
    if ((iMax > 0) && (respBuf[iMax-1] > respBuf[iMax]/2)) {
        dir--;
        dcSigSum += respBuf[iMax-1];
    }
    if ((iMax < 4) && (respBuf[iMax+1] > respBuf[iMax]/2)) {
        dir++;
        dcSigSum += respBuf[iMax+1];
    }

    // Make DC strength compatible with AC strength. use: sqrt(dcSigSum*500)
    dcSigSum *= 500; dcStr = 1;
    repeat(10) dcStr = (dcSigSum/dcStr + dcStr) / 2;  // sqrt approx
    strength = dcStr;

    // Decide if using DC strength or should read and use AC strength
    if (strength <= 200) {
      // Use AC Dir
      dir = 0; strength = 0;
      cmdBuf[1] = 0x49; // Recycle rest of cmdBuf from the DC read operation
      cResp=6;
      fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
      if (fSuccess) {
        dir = respBuf[0];
        // Sum the sensor elements to get strength
        if (dir > 0) for (i=1; i<=5; i++) strength += respBuf[i];
      }
    }
  }
#if 0
  dir = 10 - dir;
  if(dir == 10) {
      dir = 0;
  }
#endif
}

struct LightSensor {
    unsigned int black;
    unsigned int white;
    byte port;
};

void calibrateLS(LightSensor& ls,bool white) {
    unsigned int sensorValue = SensorRaw(ls.port);
    if(white) {
        TextOut(0,LCD_LINE8,"WHITE");
        ls.white = sensorValue;
    } else {
        TextOut(0,LCD_LINE8,"BLACK");
        ls.black = sensorValue;
    }
}

float readLS(const LightSensor& ls) {
    unsigned int sensor = SensorRaw(ls.port);
    NumOut(0,LCD_LINE6,sensor);
    if(sensor < ls.black) {
        return 0.0;
    }
    if(sensor > ls.white) {
        return 1.0;
    }
    float diff = sensor-ls.black;
    float scale = ls.white-ls.black;
    return diff/scale;
}

float max(float a,float b) {
    return a > b ? a : b;
}

void drive(byte left,byte right,float pwr,float steer) {
    ClearLine(LCD_LINE1);
    NumOut(0,LCD_LINE1,steer);
    float lPwr = 1.0,rPwr = 1.0;
    if(steer < 0) {
        lPwr += 2*steer;
    } else {
        rPwr -= 2*steer;
    }
    ClearLine(LCD_LINE5);
    NumOut(0,LCD_LINE5,rPwr);
    char lOut = lPwr*pwr*100.0,
         rOut = rPwr*pwr*100.0;
    NumOut(0,LCD_LINE2,lOut);
    NumOut(0,LCD_LINE3,rOut);
    OnFwd(left,lOut);
    OnFwd(right,rOut);

}
void followLine(const LightSensor& ls) {
    float sensor = readLS(ls);
    drive(PORT_LMOTOR,PORT_RMOTOR,0.5,(readLS(ls)-0.5)/0.5);
}

void turnRight90() {
    RotateMotorEx(PORT_MOTORS,50,470/2,100,true,true);
}

void turnLeft90() {
    RotateMotorEx(PORT_MOTORS,50,380/2,-100,true,true);
}

void runToWall(bool forward,int distance) {
    int sgn = forward ? 1 : -1;
    while(sgn*SensorUS(PORT_US) > sgn*distance) {
        OnFwdSync(PORT_MOTORS,sgn*50,1);
        Wait(15);
    }
    Off(PORT_MOTORS);
}

bool checkIR() {
    int dir,strength;
    HTEnhancedIRSeekerV2(PORT_IR,dir,strength);
    
    if(dir != 0) {
        return true;
    } else {
        return false;
    }
}

void alignToIR() {
    int dir,strength;
    HTEnhancedIRSeekerV2(PORT_IR,dir,strength);
    if(dir == 0) {
        return;
    }
    while(dir > 5) {
        OnFwdSync(PORT_MOTORS,30,-100);
        HTEnhancedIRSeekerV2(PORT_IR,dir,strength);
    }
    while(dir < 5) {
        OnFwdSync(PORT_MOTORS,30,100);
        HTEnhancedIRSeekerV2(PORT_IR,dir,strength);
    }
    Off(PORT_MOTORS);
    while(dir >= 5) {
        OnFwdSync(PORT_MOTORS,30,-100);
        HTEnhancedIRSeekerV2(PORT_IR,dir,strength);
    }
    Off(PORT_MOTORS);
    int leftRotate = MotorRotationCount(PORT_LMOTOR);
    do {
        HTEnhancedIRSeekerV2(PORT_IR,dir,strength);
        OnFwdSync(PORT_MOTORS,30,100);
    } while(dir <= 5);
    Off(PORT_MOTORS);
    int rightRotate = MotorRotationCount(PORT_LMOTOR);
    int rotationDeg = ((rightRotate + leftRotate)/2)
                      -MotorRotationCount(PORT_LMOTOR);
    RotateMotorEx(PORT_MOTORS,50,
                  rotationDeg,
                  -100,
                  true,
                  true);
}

void runToIR(int threshold) {
    int dir,strength;
    HTEnhancedIRSeekerV2(PORT_IR,dir,strength);
    while(strength < threshold) {
        OnFwdSync(PORT_MOTORS,50,0);
        HTEnhancedIRSeekerV2(PORT_IR,dir,strength);
    }
    Off(PORT_MOTORS);
}

void exploreHouse(){
    runToWall(true,7);
    turnRight90();
    runToWall(true,7);
    if(checkIR()) {
        return;
    }
    runToWall(false,63);
    turnLeft90();
    int dist = SensorUS(PORT_US)-1;
    runToWall(true,7);
    if(checkIR()) {
        return;
    }
    runToWall(false,dist);
    turnLeft90();
    runToWall(true,7);
    if(checkIR()) {
        return;
    }
}

void alignToWall() {
    int minDist = 255,
        prevDist,
        dist = SensorUS(PORT_US);
    minDist = dist;
    int currMotor = MotorRotationCount(PORT_LMOTOR);
    int negMotorBound = currMotor-1000,
        posMotorBound = currMotor+1000;
    int delta = 0;
    int turn = 100;
    OnFwdSync(PORT_MOTORS,30,turn);
    while(turn != 0) {
        prevDist = dist;
        dist = SensorUS(PORT_US);
        if(dist > prevDist && dist > minDist+3) {
            int motor = MotorRotationCount(PORT_LMOTOR);
            if(turn > 0) {
                posMotorBound = motor;
                turn = -100;
                Off(PORT_MOTORS);
                TextOut(0,LCD_LINE3,"A");
                minDist = 255;
                dist = SensorUS(PORT_US);
            } else {
                negMotorBound = motor;
                turn = 0;
                Off(PORT_MOTORS);
                TextOut(0,LCD_LINE3,"B");
            }
        } else if(dist < minDist) {
            minDist = dist;
        }
        OnFwdSync(PORT_MOTORS,30,turn);
    }
    Off(PORT_MOTORS);
    RotateMotorEx(PORT_MOTORS,30,
                  ((posMotorBound+negMotorBound)/2)
                    -MotorRotationCount(PORT_LMOTOR),
                  100,
                  true,
                  true);
    Off(PORT_MOTORS);
}
    
task main() {
    LightSensor ls;

    ls.port = PORT_LIGHT;
    SetSensorLight(PORT_LIGHT);
    SetSensorUltrasonic(PORT_US);
    SetSensorType(PORT_COLOR, SENSOR_TYPE_LOWSPEED);
    SetSensorLowspeed(PORT_IR);
    SetHTIRSeeker2Mode(PORT_IR, HTIR2_MODE_1200);

    Wait(250);

    calibrateLS(ls,false);
    RotateMotor(PORT_RMOTOR,75,360);
    calibrateLS(ls,true);
    RotateMotor(PORT_RMOTOR,75,-360);
    if(ls.white < ls.black) {
        unsigned int tmp = ls.white;
        ls.white = ls.black;
        ls.black = tmp;
    }

    bool prevDeadBody = false;
    int color = 0;
    unsigned long prevBodyTick = 0;
    int numBodies = 0;
    unsigned int tones[3] = {
        TONE_B6,
        TONE_G6,
        TONE_C7
    };
    while(color != COLOR_RED) {
        unsigned long tick = CurrentTick();
        color = SensorHTColorNum(PORT_COLOR);
        ClearLine(LCD_LINE4);
        NumOut(0,LCD_LINE4,color);
        bool deadBody = (color == 3); // 3: blue
        if((numBodies == 0 || (tick-prevBodyTick > 2000)) &&
           deadBody && !prevDeadBody) {
            unsigned int tone;
            if(numBodies >= 3) {
                tone = tones[2];
            } else {
                tone = tones[numBodies];
            }
            PlayTone(tone,300);
            prevBodyTick = tick;
            numBodies++;
        }
        prevDeadBody = deadBody;
        followLine(ls);
    }
    Off(PORT_LMOTOR);
    Off(PORT_RMOTOR);
    alignToWall();
    exploreHouse();
    alignToIR();
    runToIR(200);
    PlaySound(SOUND_UP);
}
