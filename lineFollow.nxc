#define PORT_RMOTOR OUT_A
#define PORT_LMOTOR OUT_B
#define PORT_LIGHT  IN_4
#define PORT_COLOR  IN_2
#define PORT_ULTRASONIC IN_3

#define COLOR_BLUE  3
#define COLOR_RED   7

struct LightSensor {
    unsigned int black;
    unsigned int white;
    byte port;
};

void calibrateLS(LightSensor& ls,bool white) {
    unsigned int sensorValue = SensorRaw(ls.port);
    if(white) {
        TextOut(0,LCD_LINE8,"WHITE");
        ls.white = sensorValue;
    } else {
        TextOut(0,LCD_LINE8,"BLACK");
        ls.black = sensorValue;
    }
}

float readLS(const LightSensor& ls) {
    unsigned int sensor = SensorRaw(ls.port);
    NumOut(0,LCD_LINE6,sensor);
    if(sensor < ls.black) {
        return 0.0;
    }
    if(sensor > ls.white) {
        return 1.0;
    }
    float diff = sensor-ls.black;
    float scale = ls.white-ls.black;
    return diff/scale;
}

float max(float a,float b) {
    return a > b ? a : b;
}

void drive(byte left,byte right,float pwr,float steer) {
    ClearLine(LCD_LINE1);
    NumOut(0,LCD_LINE1,steer);
    float lPwr = 1.0,rPwr = 1.0;
    if(steer < 0) {
        lPwr += 2*steer;
    } else {
        rPwr -= 2*steer;
    }
    ClearLine(LCD_LINE5);
    NumOut(0,LCD_LINE5,rPwr);
    char lOut = lPwr*pwr*100.0,
         rOut = rPwr*pwr*100.0;
    NumOut(0,LCD_LINE2,lOut);
    NumOut(0,LCD_LINE3,rOut);
    OnFwd(left,lOut);
    OnFwd(right,rOut);

}
void followLine(const LightSensor& ls) {
    float sensor = readLS(ls);
    drive(PORT_LMOTOR,PORT_RMOTOR,0.5,(readLS(ls)-0.5)/0.5);
}

void houseCode(){
  unsigned long stop_time;
  while(SensorUS(S3)>7){
    OnFwd(OUT_AB,75);
    Wait(15);
  }

  //turn right for 2 seconds
  stop_time = CurrentTick() + 2000;
  while (CurrentTick() < stop_time) {
    OnFwd(OUT_A, 25);
    OnRev(OUT_B, -25);
  }
  
  while(SensorUS(S3)>7){
    OnFwd(OUT_AB,50);
    Wait(15);
  }
  
  //turn left for 2 seconds
  stop_time = CurrentTick() + 2000;
  while (CurrentTick() < stop_time) {
    OnFwd(OUT_A, -15);
    OnRev(OUT_B, 15);
  }
  
  //go forward till 15cm is in front of it
  //may be replaced with arm code to simply break the plane of the room
  while(SensorUS(S3)>15){
    OnFwd(OUT_AB,50);
    Wait(15);
  }
  
  //code for setting if flag is in this room or not
  
  //reverse
  //may not be needed with arm code implemented
  while(SensorUS(S3)<75){
    OnRev(OUT_AB,50);
    Wait(15);
  }
  
  //turn left for 2 seconds
  stop_time = CurrentTick() + 2000;
  while (CurrentTick() < stop_time) {
    OnFwd(OUT_A, -15);
    OnRev(OUT_B, 15);
  }
  
  while(SensorUS(S3)>40){
    OnFwd(OUT_AB,50);
    Wait(15);
  }
  
  //turn right for 2 seconds
  stop_time = CurrentTick() + 2000;
  while (CurrentTick() < stop_time) {
    OnFwd(OUT_A, 15);
    OnRev(OUT_B, -15);
  }
  
  //may be replaced with arm's code
  while(SensorUS(S3)>60){
    OnFwd(OUT_AB,50);
    Wait(15);
  }
  
  while(SensorUS(S3)<100){
    OnRev(OUT_AB,50);
    Wait(15);
  }

  //turn left for 2 seconds
  stop_time = CurrentTick() + 2000;
  while (CurrentTick() < stop_time) {
    OnFwd(OUT_A, -15);
    OnRev(OUT_B, 15);
  }
  
  while(SensorUS(S3)>7){
    OnFwd(OUT_AB,50);
    Wait(15);
  }
  
  //turn right for 2 seconds
  stop_time = CurrentTick() + 2000;
  while (CurrentTick() < stop_time) {
    OnFwd(OUT_A, 15);
    OnRev(OUT_B, -15);
  }
  
  while(SensorUS(S3)>7){
    OnFwd(OUT_AB,50);
    Wait(15);
  }
  
  if(!ballInLeftRoom){
    while(SensorUS(S3)<80){
      OnRev(OUT_AB,50);
      Wait(15);
    }
  }
  //done searching every room
}
    
task main() {
    LightSensor ls;

    ls.port = PORT_LIGHT;
    SetSensorLight(PORT_LIGHT);
    SetSensorUltrasonic(PORT_ULTRASONIC);
    SetSensorType(PORT_COLOR, SENSOR_TYPE_LOWSPEED);

    Wait(250);
    
    calibrateLS(ls,false);
    RotateMotor(PORT_RMOTOR,75,360);
    calibrateLS(ls,true);
    RotateMotor(PORT_RMOTOR,75,-360);
    if(ls.white < ls.black) {
        unsigned int tmp = ls.white;
        ls.white = ls.black;
        ls.black = tmp;
    }

    bool prevDeadBody = false;
    int color = 0;
    unsigned long prevBodyTick = 0;
    int numBodies = 0;
    unsigned int tones[3] = {
        TONE_B6,
        TONE_G6,
        TONE_C7
    };
    while(color != COLOR_RED) {
        unsigned long tick = CurrentTick();
        color = SensorHTColorNum(PORT_COLOR);
        ClearLine(LCD_LINE4);
        NumOut(0,LCD_LINE4,color);
        bool deadBody = (color == 3); // 3: blue
        if((numBodies == 0 || (tick-prevBodyTick > 2000)) &&
           deadBody && !prevDeadBody) {
            unsigned int tone;
            if(numBodies >= 3) {
                tone = tones[2];
            } else {
                tone = tones[numBodies];
            }
            PlayTone(tone,300);
            prevBodyTick = tick;
            numBodies++;
        }
        prevDeadBody = deadBody;
        followLine(ls);
    }
    // houseCode();
    Off(PORT_LMOTOR);
    Off(PORT_RMOTOR);
}
